1) What happens when you initialize a repository? Why do you need to do it?

Initializing a repository creates a .Gif directory in the current directory. This creates a repository to track files.

2) How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows me to enter changes to my working file while thumb printing my original work in the event I need to revert this code. 

3) How can you use the staging area to make sure you have one commit per logical change?

By adding only files that you are working on.

4) What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful when experimenting or needing to track separate changes. Branches allow for a working file to be available while allowing to switch into a test-mode.

5) How do the diagrams help you visualize the branch structure?

Diagrams help to horizontally layout the commits and show where branches occur.

6) What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging 2 branches merges all changes between 2 separate branches. They are diagramed accordingly to show the connection to each commits parent.

7) What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Automatic merging when files don’t have conflicts is fast and low risk; manually merging branches allows the user to select which version of the updated code is correct.